
/*******************************************************************************************

File Name       :   CSLAB_RANKING_METRICS_V1
Purpose 	:   A Program for Ranking Metrics in Scala
Author		:   Durga Prasad
Reviewer 	:   Jothi Periasamy
Date and Time	:   08/02/2019 18:04 hrs
Version		:   1.0	
Change History 	: 

____________________________________________________________________________________________

	Who				   When 			  Why
____________________________________________________________________________________________


	DP				08/02/2019		    Initital Release 

____________________________________________________________________________________________


/*******************************************************************************************

## Program Description : A Program for Random RDD Generation in Scala

## Scala Development Environment & Runtime - Eclipse IDE, Anaconda, Jupyter

import org.apache.spark.mllib.evaluation.{RankingMetrics, RegressionMetrics}
import org.apache.spark.mllib.recommendation.{ALS, Rating}
import org.apache.spark.sql.SparkSession

object RankingMetricsExample {
    
  def main(args: Array[String]) {
    val vAR_CSLAB_spark = SparkSession
      .builder
      .appName("RankingMetricsExample")
      .getOrCreate()
      
    import spark.implicits._
      
    var vAR_CSLAB_ENV_PATH = sys.env("SCALA_TUTORIAL_PATH2")
       
    var vAR_CSLAB_DATA_FILE =  "sample_movielens_data.txt";
      
    var vAR_CSLAB_FILE_PATH =  vAR_CSLAB_ENV_PATH + vAR_CSLAB_DATA_FILE
      
    // Read in the ratings data
    val vAR_CSLAB_ratings = vAR_CSLAB_spark.read.textFile(vAR_CSLAB_FILE_PATH).rdd.map { vAR_CSLAB_line =>
      val vAR_CSLAB_fields = vAR_CSLAB_line.split("::")
      Rating(vAR_CSLAB_fields(0).toInt, vAR_CSLAB_fields(1).toInt, vAR_CSLAB_fields(2).toDouble - 2.5)
    }.cache()

    // Map ratings to 1 or 0, 1 indicating a movie that should be recommended
    val vAR_CSLAB_binarizedRatings = vAR_CSLAB_ratings.map(vAR_CSLAB_r => Rating(vAR_CSLAB_r.user, vAR_CSLAB_r.product,
      if (vAR_CSLAB_r.rating > 0) 1.0 else 0.0)).cache()

    // Summarize ratings
    val vAR_CSLAB_numRatings = vAR_CSLAB_ratings.count()
      
    val vAR_CSLAB_numUsers = vAR_CSLAB_ratings.map(_.user).distinct().count()
      
    val vAR_CSLAB_numMovies = vAR_CSLAB_ratings.map(_.product).distinct().count()
      
    println(s"Got $vAR_CSLAB_numRatings ratings from $vAR_CSLAB_numUsers users on $vAR_CSLAB_numMovies movies.")

    // Build the model
    val vAR_CSLAB_numIterations = 10
      
    val vAR_CSLAB_rank = 10
      
    val vAR_CSLAB_lambda = 0.01
      
    val vAR_CSLAB_model = ALS.train(vAR_CSLAB_ratings, vAR_CSLAB_rank, vAR_CSLAB_numIterations, vAR_CSLAB_lambda)

    // Define a function to scale ratings from 0 to 1
    def scaledRating(vAR_CSLAB_r: Rating): Rating = {
        
      val vAR_CSLAB_scaledRating = math.max(math.min(vAR_CSLAB_r.rating, 1.0), 0.0)
      Rating(vAR_CSLAB_r.user, vAR_CSLAB_r.product, vAR_CSLAB_scaledRating)
    }

    // Get sorted top ten predictions for each user and then scale from [0, 1]
    val vAR_CSLAB_userRecommended = vAR_CSLAB_model.recommendProductsForUsers(10).map { case (user, recs) =>
      (user, recs.map(scaledRating))
    }

    // Assume that any movie a user rated 3 or higher (which maps to a 1) is a relevant document
    // Compare with top ten most relevant documents
    val vAR_CSLAB_userMovies = vAR_CSLAB_binarizedRatings.groupBy(_.user)
      
    val vAR_CSLAB_relevantDocuments = vAR_CSLAB_userMovies.join(vAR_CSLAB_userRecommended).map { case (user, (actual,
    predictions)) =>
      (predictions.map(_.product), actual.filter(_.rating > 0.0).map(_.product).toArray)
    }

    // Instantiate metrics object
    val vAR_CSLAB_metrics = new RankingMetrics(vAR_CSLAB_relevantDocuments)

    // Precision at K
    Array(1, 3, 5).foreach { k =>
      println(s"Precision at $k = ${vAR_CSLAB_metrics.precisionAt(k)}")
    }

    // Mean average precision
    println(s"Mean average precision = ${vAR_CSLAB_metrics.meanAveragePrecision}")

    // Normalized discounted cumulative gain
    Array(1, 3, 5).foreach { k =>
      println(s"NDCG at $k = ${vAR_CSLAB_metrics.ndcgAt(k)}")
    }

    // Get predictions for each data point
    val vAR_CSLAB_allPredictions = vAR_CSLAB_model.predict(vAR_CSLAB_ratings.map(vAR_CSLAB_r => (vAR_CSLAB_r.user, vAR_CSLAB_r.product))).map(vAR_CSLAB_r => ((vAR_CSLAB_r.user,
      vAR_CSLAB_r.product), vAR_CSLAB_r.rating))
      
    val vAR_CSLAB_allRatings = vAR_CSLAB_ratings.map(vAR_CSLAB_r => ((vAR_CSLAB_r.user, vAR_CSLAB_r.product), vAR_CSLAB_r.rating)
                                                    )
    val vAR_CSLAB_predictionsAndLabels = vAR_CSLAB_allPredictions.join(vAR_CSLAB_allRatings).map { case ((user, product),
    (predicted, actual)) =>
      (predicted, actual)
    }

    // Get the RMSE using regression metrics
    val vAR_CSLAB_regressionMetrics = new RegressionMetrics(vAR_CSLAB_predictionsAndLabels)
      
    println(s"RMSE = ${vAR_CSLAB_regressionMetrics.rootMeanSquaredError}")

    // R-squared
   println(s"R-squared = ${vAR_CSLAB_regressionMetrics.r2}")
    
  }
    
}
	 
/*******************************************************************************************
  Disclaimer.

      We are providing this code block strictly for learning and researching, this is not a 
production ready code. We have no liability on this particular code under any circumstances; 
users should use this code on their own risk. All software, hardware and othr products that 
are referenced in these materials belong to the respective vendor who developed or who owns 
this product.

/*******************************************************************************************
  