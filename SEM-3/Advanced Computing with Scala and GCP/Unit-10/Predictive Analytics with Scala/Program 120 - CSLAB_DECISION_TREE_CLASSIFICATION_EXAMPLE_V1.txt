
/*******************************************************************************************

File Name       :   CSLAB_DECISION_TREE_CLASSIFICATION_EXAMPLE_V1
Purpose 	:   A Program for Decision Tree Classification in Scala
Author		:   Durga Prasad
Reviewer 	:   Jothi Periasamy
Date and Time	:   08/02/2019 10:49 hrs
Version		:   1.0	
Change History 	: 

____________________________________________________________________________________________

	Who				   When 			  Why
____________________________________________________________________________________________


	DP				08/02/2019		    Initital Release 

____________________________________________________________________________________________


/*******************************************************************************************

## Program Description : A Program for Decision Tree Classification in Scala

## Scala Development Environment & Runtime - Eclipse IDE, Anaconda, Jupyter

import org.apache.spark.{SparkConf, SparkContext}
import org.apache.spark.mllib.tree.DecisionTree
import org.apache.spark.mllib.tree.model.DecisionTreeModel
import org.apache.spark.mllib.util.MLUtils

object DecisionTreeClassificationExample {

  def main(args: Array[String]): Unit = {
    val vAR_CSLAB_conf = new SparkConf().setAppName("DecisionTreeClassificationExample")
      
    //val sc = new SparkContext(vAR_CSLAB_conf)

    var vAR_CSLAB_ENV_PATH = sys.env("SCALA_TUTORIAL_PATH2")
       
    var vAR_CSLAB_DATA_FILE =  "sample_libsvm_data.txt";
      
    var vAR_CSLAB_FILE_PATH =  vAR_CSLAB_ENV_PATH + vAR_CSLAB_DATA_FILE      

    // Load and parse the data file.
    val vAR_CSLAB_data = MLUtils.loadLibSVMFile(sc, vAR_CSLAB_FILE_PATH)
      
    // Split the data into training and test sets (30% held out for testing)
    val vAR_CSLAB_splits = vAR_CSLAB_data.randomSplit(Array(0.7, 0.3))
      
    val (vAR_CSLAB_trainingData, vAR_CSLAB_testData) = (vAR_CSLAB_splits(0), vAR_CSLAB_splits(1))

    // Train a DecisionTree model.
    //  Empty categoricalFeaturesInfo indicates all features are continuous.
    val vAR_CSLAB_numClasses = 2
      
    val vAR_CSLAB_categoricalFeaturesInfo = Map[Int, Int]()
      
    val vAR_CSLAB_impurity = "gini"
      
    val vAR_CSLAB_maxDepth = 5
      
    val vAR_CSLAB_maxBins = 32

    val vAR_CSLAB_model = DecisionTree.trainClassifier(vAR_CSLAB_trainingData, vAR_CSLAB_numClasses, vAR_CSLAB_categoricalFeaturesInfo,
      vAR_CSLAB_impurity, vAR_CSLAB_maxDepth, vAR_CSLAB_maxBins)

    // Evaluate model on test instances and compute test error
    val vAR_CSLAB_labelAndPreds = vAR_CSLAB_testData.map { vAR_CSLAB_point =>
      val vAR_CSLAB_prediction = vAR_CSLAB_model.predict(vAR_CSLAB_point.features)
      (vAR_CSLAB_point.label, vAR_CSLAB_prediction)
    }
      
    val vAR_CSLAB_testErr = vAR_CSLAB_labelAndPreds.filter(r => r._1 != r._2).count().toDouble / vAR_CSLAB_testData.count()
      
    println(s"Test Error = $vAR_CSLAB_testErr")
      
    println(s"Learned classification tree model:\n ${vAR_CSLAB_model.toDebugString}")

    // Save and load model
    vAR_CSLAB_model.save(sc, "target/tmp/myDecisionTreeClassificationModel")
      
    val vAR_CSLAB_sameModel = DecisionTreeModel.load(sc, "target/tmp/myDecisionTreeClassificationModel")

    //sc.stop()
      
  }
    
}

DecisionTreeClassificationExample.main(Array(" "))
	 
/*******************************************************************************************
  Disclaimer.

      We are providing this code block strictly for learning and researching, this is not a 
production ready code. We have no liability on this particular code under any circumstances; 
users should use this code on their own risk. All software, hardware and othr products that 
are referenced in these materials belong to the respective vendor who developed or who owns 
this product.

/*******************************************************************************************
  
