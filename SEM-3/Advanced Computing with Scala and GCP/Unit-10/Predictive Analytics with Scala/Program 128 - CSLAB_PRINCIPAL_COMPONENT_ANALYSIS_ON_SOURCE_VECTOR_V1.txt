
/*******************************************************************************************

File Name       :   CSLAB_PRINCIPAL_COMPONENT_ANALYSIS_ON_SOURCE_VECTOR_V1
Purpose 	:   A Program for Principal Component Analysis on Source Vector in Scala
Author		:   Durga Prasad
Reviewer 	:   Jothi Periasamy
Date and Time	:   08/02/2019 15:28 hrs
Version		:   1.0	
Change History 	: 

____________________________________________________________________________________________

	Who				   When 			  Why
____________________________________________________________________________________________


	DP				08/02/2019		    Initital Release 

____________________________________________________________________________________________


/*******************************************************************************************

## Program Description : A Program for Principal Component Analysis on Source Vector in Scala

## Scala Development Environment & Runtime - Eclipse IDE, Anaconda, Jupyter

import org.apache.spark.SparkConf
import org.apache.spark.SparkContext
import org.apache.spark.mllib.feature.PCA
import org.apache.spark.mllib.linalg.Vectors
import org.apache.spark.mllib.regression.LabeledPoint
import org.apache.spark.rdd.RDD


object PCAOnSourceVectorExample {

  def main(args: Array[String]): Unit = {

    val vAR_CSLAB_conf = new SparkConf().setAppName("PCAOnSourceVectorExample")

    val vAR_CSLAB_data: RDD[LabeledPoint] = sc.parallelize(Seq(
      new LabeledPoint(0, Vectors.dense(1, 0, 0, 0, 1)),
      new LabeledPoint(1, Vectors.dense(1, 1, 0, 1, 0)),
      new LabeledPoint(1, Vectors.dense(1, 1, 0, 0, 0)),
      new LabeledPoint(0, Vectors.dense(1, 0, 0, 0, 0)),
      new LabeledPoint(1, Vectors.dense(1, 1, 0, 0, 0))))

    // Compute the top 5 principal components.
    val vAR_CSLAB_pca = new PCA(5).fit(vAR_CSLAB_data.map(_.features))

    // Project vectors to the linear space spanned by the top 5 principal
    // components, keeping the label
    val vAR_CSLAB_projected = vAR_CSLAB_data.map(vAR_CSLAB_p => vAR_CSLAB_p.copy(features = vAR_CSLAB_pca.transform(vAR_CSLAB_p.features)))
    
      
    val vAR_CSLAB_collect = vAR_CSLAB_projected.collect()
      
    println("Projected vector of principal component:")
      
    vAR_CSLAB_collect.foreach { vAR_CSLAB_vector => println(vAR_CSLAB_vector) }
      
  }

}

PCAOnSourceVectorExample.main(Array(" "))
	 
/*******************************************************************************************
  Disclaimer.

      We are providing this code block strictly for learning and researching, this is not a 
production ready code. We have no liability on this particular code under any circumstances; 
users should use this code on their own risk. All software, hardware and othr products that 
are referenced in these materials belong to the respective vendor who developed or who owns 
this product.

/*******************************************************************************************
  