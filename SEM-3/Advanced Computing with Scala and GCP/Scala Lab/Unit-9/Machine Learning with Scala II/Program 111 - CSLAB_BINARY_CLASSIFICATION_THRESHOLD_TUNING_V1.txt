
/*******************************************************************************************

File Name       :   CSLAB_BINARY_CLASSIFICATION_THRESHOLD_TUNING_V1
Purpose 	:   A Program for Binary Classification - Threshold Tuning in Scala
Author		:   Durga Prasad
Reviewer 	:   Jothi Periasamy
Date and Time	:   07/02/2019 15:19 hrs
Version		:   1.0	
Change History 	: 

____________________________________________________________________________________________

	Who				   When 			  Why
____________________________________________________________________________________________


	DP				07/02/2019		    Initital Release 

____________________________________________________________________________________________


/*******************************************************************************************

## Program Description : A Program for PrefixSpan Algorithm in Scala

## Scala Development Environment & Runtime - Eclipse IDE, Anaconda, Jupyter

import org.apache.spark.mllib.classification.LogisticRegressionWithLBFGS
import org.apache.spark.mllib.evaluation.BinaryClassificationMetrics
import org.apache.spark.mllib.regression.LabeledPoint
import org.apache.spark.mllib.util.MLUtils

var vAR_CSLAB_ENV_PATH = sys.env("SCALA_TUTORIAL_PATH2")
       
var vAR_CSLAB_DATA_FILE =  "sample_binary_classification_data.txt";
      
var vAR_CSLAB_FILE_PATH =  vAR_CSLAB_ENV_PATH + vAR_CSLAB_DATA_FILE

// Load training data in LIBSVM format
val vAR_CSLAB_data = MLUtils.loadLibSVMFile(sc, vAR_CSLAB_FILE_PATH)

// Split data into training (60%) and test (40%)
val Array(vAR_CSLAB_training, vAR_CSLAB_test) = vAR_CSLAB_data.randomSplit(Array(0.6, 0.4), seed = 11L)

vAR_CSLAB_training.cache()

// Run training algorithm to build the model
val vAR_CSLAB_model = new LogisticRegressionWithLBFGS()
  .setNumClasses(2)
  .run(vAR_CSLAB_training)

// Clear the prediction threshold so the model will return probabilities
vAR_CSLAB_model.clearThreshold

// Compute raw scores on the test set
val vAR_CSLAB_predictionAndLabels = vAR_CSLAB_test.map { case LabeledPoint(label, features) =>
  val vAR_CSLAB_prediction = vAR_CSLAB_model.predict(features)
  (vAR_CSLAB_prediction, label)
}

// Instantiate metrics object
val vAR_CSLAB_metrics = new BinaryClassificationMetrics(vAR_CSLAB_predictionAndLabels)

// Precision by threshold
val vAR_CSLAB_precision = vAR_CSLAB_metrics.precisionByThreshold
vAR_CSLAB_precision.foreach { case (t, p) =>
    println(s"Threshold: $t, Precision: $p")
}

// Recall by threshold
val vAR_CSLAB_recall = vAR_CSLAB_metrics.recallByThreshold
vAR_CSLAB_recall.foreach { case (t, r) =>
    println(s"Threshold: $t, Recall: $r")
}

// Precision-Recall Curve
val vAR_CSLAB_PRC = vAR_CSLAB_metrics.pr

// F-measure
val vAR_CSLAB_f1Score = vAR_CSLAB_metrics.fMeasureByThreshold
vAR_CSLAB_f1Score.foreach { case (t, f) =>
    println(s"Threshold: $t, F-score: $f, Beta = 1")
}

val vAR_CSLAB_beta = 0.5
val vAR_CSLAB_fScore = vAR_CSLAB_metrics.fMeasureByThreshold(vAR_CSLAB_beta)
vAR_CSLAB_f1Score.foreach { case (t, f) =>
    println(s"Threshold: $t, F-score: $f, Beta = 0.5")
}

// AUPRC
val vAR_CSLAB_auPRC = vAR_CSLAB_metrics.areaUnderPR

println("Area under precision-recall curve = " + vAR_CSLAB_auPRC)

// Compute thresholds used in ROC and PR curves
val vAR_CSLAB_thresholds = vAR_CSLAB_precision.map(_._1)

// ROC Curve
val vAR_CSLAB_roc = vAR_CSLAB_metrics.roc

// AUROC
val vAR_CSLAB_auROC = vAR_CSLAB_metrics.areaUnderROC

println("Area under ROC = " + vAR_CSLAB_auROC)
	 
/*******************************************************************************************
  Disclaimer.

      We are providing this code block strictly for learning and researching, this is not a 
production ready code. We have no liability on this particular code under any circumstances; 
users should use this code on their own risk. All software, hardware and othr products that 
are referenced in these materials belong to the respective vendor who developed or who owns 
this product.

/*******************************************************************************************
  
