
/*******************************************************************************************

File Name       :   CSLAB_PATIENT_VOLUME_AT_HOSPITAL_PREDICTION_V1
Purpose 	:   A Program for Prediction of Patient Volume at the Hospital in Scala
Author		:   Durga Prasad
Reviewer 	:   Jothi Periasamy
Date and Time	:   12/02/2019 16:39 hrs
Version		:   1.0	
Change History 	: 

____________________________________________________________________________________________

	Who				   When 			  Why
____________________________________________________________________________________________


	DP				12/02/2019		    Initital Release 

____________________________________________________________________________________________


/*******************************************************************************************

## Program Description : A Program for Prediction of Patient Wait Time at the Hospital in Scala

## Scala Development Environment & Runtime - Eclipse IDE, Anaconda, Jupyter

import org.apache.spark.mllib.tree.GradientBoostedTrees
import org.apache.spark.mllib.tree.configuration.BoostingStrategy
import org.apache.spark.mllib.tree.model.GradientBoostedTreesModel
import org.apache.spark.mllib.util.MLUtils

var vAR_CSLAB_ENV_PATH = sys.env("SCALA_TUTORIAL_PATH2")
       
var vAR_CSLAB_DATA_FILE =  "sample_libsvm_data.txt";
      
var vAR_CSLAB_FILE_PATH =  vAR_CSLAB_ENV_PATH + vAR_CSLAB_DATA_FILE 

// Load and parse the data file.
val vAR_CSLAB_data = MLUtils.loadLibSVMFile(sc, vAR_CSLAB_FILE_PATH)

// Split the data into training and test sets (30% held out for testing)
val vAR_CSLAB_splits = vAR_CSLAB_data.randomSplit(Array(0.7, 0.3))

val (vAR_CSLAB_trainingData, vAR_CSLAB_testData) = (vAR_CSLAB_splits(0), vAR_CSLAB_splits(1))

// Train a GradientBoostedTrees model.
//  The defaultParams for Regression use SquaredError by default.
val vAR_CSLAB_boostingStrategy = BoostingStrategy.defaultParams("Regression")

vAR_CSLAB_boostingStrategy.numIterations = 3 // Note: Use more iterations in practice.

vAR_CSLAB_boostingStrategy.treeStrategy.maxDepth = 5

//  Empty categoricalFeaturesInfo indicates all features are continuous.
vAR_CSLAB_boostingStrategy.treeStrategy.categoricalFeaturesInfo = Map[Int, Int]()

val vAR_CSLAB_model = GradientBoostedTrees.train(vAR_CSLAB_trainingData, vAR_CSLAB_boostingStrategy)

// Evaluate model on test instances and compute test error
val vAR_CSLAB_labelsAndPredictions = vAR_CSLAB_testData.map { vAR_CSLAB_point =>
  val vAR_CSLAB_prediction = vAR_CSLAB_model.predict(vAR_CSLAB_point.features)
  (vAR_CSLAB_point.label, vAR_CSLAB_prediction)
}

val vAR_CSLAB_testMSE = vAR_CSLAB_labelsAndPredictions.map{ case(v, p) => math.pow((v - p), 2)}.mean()

println("Test Mean Squared Error = " + vAR_CSLAB_testMSE)

println("Learned regression GBT model:\n" + vAR_CSLAB_model.toDebugString)

// Save and load model
vAR_CSLAB_model.save(sc, "PatientVolumeattheHospital")

val vAR_CSLAB_sameModel = GradientBoostedTreesModel.load(sc, "PatientVolumeattheHospital")

/*******************************************************************************************
  Disclaimer.

      We are providing this code block strictly for learning and researching, this is not a 
production ready code. We have no liability on this particular code under any circumstances; 
users should use this code on their own risk. All software, hardware and othr products that 
are referenced in these materials belong to the respective vendor who developed or who owns 
this product.

/*******************************************************************************************
  
