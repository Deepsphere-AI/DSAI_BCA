
/*******************************************************************************************

File Name       :   CSLAB_SUPPORT_VECTOR_MACHINES_WITH_SGD_V1
Purpose 	:   A Program for Support Vector Machines With SGD in Scala
Author		:   Durga Prasad
Reviewer 	:   Jothi Periasamy
Date and Time	:   11/02/2019 14:04 hrs
Version		:   1.0	
Change History 	: 

____________________________________________________________________________________________

	Who				   When 			  Why
____________________________________________________________________________________________


	DP				11/02/2019		    Initital Release 

____________________________________________________________________________________________


/*******************************************************************************************

## Program Description : A Program for Support Vector Machines With SGD in Scala

## Scala Development Environment & Runtime - Eclipse IDE, Anaconda, Jupyter

import org.apache.spark.{SparkConf, SparkContext}
import org.apache.spark.mllib.classification.{SVMModel, SVMWithSGD}
import org.apache.spark.mllib.evaluation.BinaryClassificationMetrics
import org.apache.spark.mllib.util.MLUtils

object SVMWithSGDExample {

  def main(args: Array[String]): Unit = {
      
    val vAR_CSLAB_conf = new SparkConf().setAppName("SVMWithSGDExample")

    var vAR_CSLAB_ENV_PATH = sys.env("SCALA_TUTORIAL_PATH2")
       
    var vAR_CSLAB_DATA_FILE =  "sample_libsvm_data.txt";
      
    var vAR_CSLAB_FILE_PATH =  vAR_CSLAB_ENV_PATH + vAR_CSLAB_DATA_FILE 
      
    // Load training data in LIBSVM format.
    val vAR_CSLAB_data = MLUtils.loadLibSVMFile(sc, vAR_CSLAB_FILE_PATH)

    // Split data into training (60%) and test (40%).
    val vAR_CSLAB_splits = vAR_CSLAB_data.randomSplit(Array(0.6, 0.4), seed = 11L)
      
    val vAR_CSLAB_training = vAR_CSLAB_splits(0).cache()
      
    val vAR_CSLAB_test = vAR_CSLAB_splits(1)

    // Run training algorithm to build the model
    val vAR_CSLAB_numIterations = 100
      
    val vAR_CSLAB_model = SVMWithSGD.train(vAR_CSLAB_training, vAR_CSLAB_numIterations)

    // Clear the default threshold.
    vAR_CSLAB_model.clearThreshold()

    // Compute raw scores on the test set.
    val vAR_CSLAB_scoreAndLabels = vAR_CSLAB_test.map { vAR_CSLAB_point =>
      val vAR_CSLAB_score = vAR_CSLAB_model.predict(vAR_CSLAB_point.features)
      (vAR_CSLAB_score, vAR_CSLAB_point.label)
    }

    // Get evaluation metrics.
    val vAR_CSLAB_metrics = new BinaryClassificationMetrics(vAR_CSLAB_scoreAndLabels)
      
    val vAR_CSLAB_auROC = vAR_CSLAB_metrics.areaUnderROC()

    println(s"Area under ROC = $vAR_CSLAB_auROC")

    // Save and load model
    vAR_CSLAB_model.save(sc, "scalaSVMWithSGDModel")
      
    val vAR_CSLAB_sameModel = SVMModel.load(sc, "scalaSVMWithSGDModel")
      
  }
    
}

SVMWithSGDExample.main(Array(""))
	 
/*******************************************************************************************
  Disclaimer.

      We are providing this code block strictly for learning and researching, this is not a 
production ready code. We have no liability on this particular code under any circumstances; 
users should use this code on their own risk. All software, hardware and othr products that 
are referenced in these materials belong to the respective vendor who developed or who owns 
this product.

/*******************************************************************************************
  