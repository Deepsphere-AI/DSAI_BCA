
/*******************************************************************************************

File Name       :   CSLAB_COSINE_SIMILARITY_V1
Purpose 	:   Code for Cosine Similarity in Scala
Author		:   Durga Prasad
Reviewer 	:   Jothi Periasamy
Date and Time	:   01/21/2015 14:04 hrs
Version		:   1.0	
Change History 	: 

____________________________________________________________________________________________

	Who				   When 			  Why
____________________________________________________________________________________________


	DP				01/21/2015		    Initital Release 

____________________________________________________________________________________________


/*******************************************************************************************

  package org.apache.spark.examples.mllib

  import scopt.OptionParser

  import org.apache.spark.{SparkConf, SparkContext}

  import org.apache.spark.SparkContext._

  import org.apache.spark.mllib.linalg.Vectors

  import org.apache.spark.mllib.linalg.distributed.{MatrixEntry, RowMatrix}

  object CosineSimilarity {
  
  case class Params(inputFile: String = null, threshold: Double = 0.1)
    
  extends AbstractParams[Params]

  def main(args: Array[String]) {
    
  val defaultParams = Params()

  val parser = new OptionParser[Params]("CosineSimilarity") {
  
  head("CosineSimilarity: an example app.")
      
  opt[Double]("threshold")
   
  .required()
  
  .text(s"threshold similarity: to tradeoff computation vs quality estimate")
  
  .action((x, c) => c.copy(threshold = x))
  
  arg[String]("<inputFile>")
        
  .required()
       
  .text(s"input file, one row per line, space-separated")
 
   .action((x, c) => c.copy(inputFile = x))
   
   parser.parse(args, defaultParams).map { params =>
     
   run(params)

   } getOrElse {

   System.exit(1)
   
   }

   }

   def run(params: Params) {
    
   val conf = new SparkConf().setAppName("CosineSimilarity")

   val sc = new SparkContext(conf)

   val rows = sc.textFile(params.inputFile).map { line =>
   
   val values = line.split(' ').map(_.toDouble)

   Vectors.dense(values)

   }.cache()
    
   val mat = new RowMatrix(rows)

   val exact = mat.columnSimilarities()

   val approx = mat.columnSimilarities(params.threshold)

   val exactEntries = exact.entries.map { case MatrixEntry(i, j, u) => ((i, j), u) }
    
   val approxEntries = approx.entries.map { case MatrixEntry(i, j, v) => ((i, j), v) }
    
   val MAE = exactEntries.leftOuterJoin(approxEntries).values.map {
      
   case (u, Some(v)) =>
        
   math.abs(u - v)
      
   case (u, None) =>
        
   math.abs(u)
    
   }.mean()

   println(s"Average absolute error in estimate is: $MAE")

   sc.stop()
  
   }

   }

/*******************************************************************************************
  Disclaimer.

      We are providing this code block strictly for learning and researching, this is not a 
production ready code. We have no liability on this particular code under any circumstances; 
users should use this code on their own risk. All software, hardware and othr products that 
are referenced in these materials belong to the respective vendor who developed or who owns 
this product.

/*******************************************************************************************
  
