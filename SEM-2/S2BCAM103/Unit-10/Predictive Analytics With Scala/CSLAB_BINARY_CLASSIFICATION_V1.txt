
/*******************************************************************************************

File Name       :   CSLAB_BINARY_CLASSIFICATION_V1
Purpose 	:   Code for Binary Classification in Scala
Author		:   Durga Prasad
Reviewer 	:   Jothi Periasamy
Date and Time	:   01/21/2015 10:49 hrs
Version		:   1.0	
Change History 	: 

____________________________________________________________________________________________

	Who				   When 			  Why
____________________________________________________________________________________________


	DP				01/21/2015		    Initital Release 

____________________________________________________________________________________________


/*******************************************************************************************

   package org.apache.spark.examples.mllib

   import org.apache.log4j.{Level, Logger}

   import scopt.OptionParser

   import org.apache.spark.{SparkConf, SparkContext}

   import org.apache.spark.mllib.classification.{LogisticRegressionWithLBFGS, SVMWithSGD}

   import org.apache.spark.mllib.evaluation.BinaryClassificationMetrics

   import org.apache.spark.mllib.optimization.{L1Updater, SquaredL2Updater}

   import org.apache.spark.mllib.util.MLUtils

   object BinaryClassification {

   object Algorithm extends Enumeration {
    
   type Algorithm = Value
    
   val SVM, LR = Value
  
   }

   object RegType extends Enumeration {
    
   type RegType = Value
    
   val L1, L2 = Value
  
   }

   import Algorithm._
  
   import RegType._

   case class Params(
      
   input: String = null,
      
   numIterations: Int = 100,
      
   stepSize: Double = 1.0,
      
   algorithm: Algorithm = LR,
   
   regType: RegType = L2,
   
   regParam: Double = 0.01) extends AbstractParams[Params]

   def main(args: Array[String]) {
    
   val defaultParams = Params()

   val parser = new OptionParser[Params]("BinaryClassification") {
   
   head("BinaryClassification: an example app for binary classification.")
      
   opt[Int]("numIterations")
   
   .text("number of iterations")
  
   .action((x, c) => c.copy(numIterations = x))
  
   opt[Double]("stepSize")
   
   .text("initial step size (ignored by logistic regression), " +
  
   s"default: ${defaultParams.stepSize}")
   
   .action((x, c) => c.copy(stepSize = x))
   
   opt[String]("algorithm")
   
   .text(s"algorithm (${Algorithm.values.mkString(",")}), " +
        
    s"default: ${defaultParams.algorithm}")
    
   .action((x, c) => c.copy(algorithm = Algorithm.withName(x)))
      
   opt[String]("regType")
        
   .text(s"regularization type (${RegType.values.mkString(",")}), " +
    
    s"default: ${defaultParams.regType}")

    .action((x, c) => c.copy(regType = RegType.withName(x)))
      
    opt[Double]("regParam")
        
   .text(s"regularization parameter, default: ${defaultParams.regParam}")
      
    arg[String]("<input>")
        
   .required()
        
   .text("input paths to labeled examples in LIBSVM format")
        
   .action((x, c) => c.copy(input = x))
     
    parser.parse(args, defaultParams).map { params =>
     
    run(params)
    
    } getOrElse {
      
    sys.exit(1)
    
    }
  
    }

    def run(params: Params) {
    
    val conf = new SparkConf().setAppName(s"BinaryClassification with $params")
    
    val sc = new SparkContext(conf)

    Logger.getRootLogger.setLevel(Level.WARN)

    val examples = MLUtils.loadLibSVMFile(sc, params.input).cache()

    val splits = examples.randomSplit(Array(0.8, 0.2))
    
    val training = splits(0).cache()
    
    val test = splits(1).cache()

    val numTraining = training.count()
    
    val numTest = test.count()
    
    println(s"Training: $numTraining, test: $numTest.")

    examples.unpersist(blocking = false)

    val updater = params.regType match {

    case L1 => new L1Updater()
    
    case L2 => new SquaredL2Updater()
    
    }

    val model = params.algorithm match {
      
    case LR =>
    
    val algorithm = new LogisticRegressionWithLBFGS()
    
    algorithm.optimizer
    
    .setNumIterations(params.numIterations)
    
    .setUpdater(updater)
    
    .setRegParam(params.regParam)
    
    algorithm.run(training).clearThreshold()
    
    case SVM =>
    
   val algorithm = new SVMWithSGD()
    
   algorithm.optimizer
   
   .setNumIterations(params.numIterations)
   
   .setStepSize(params.stepSize)
   
   .setUpdater(updater)
  
   .setRegParam(params.regParam)
   
    algorithm.run(training).clearThreshold()
    
    }

    val prediction = model.predict(test.map(_.features))
    
    val predictionAndLabel = prediction.zip(test.map(_.label))

    val metrics = new BinaryClassificationMetrics(predictionAndLabel)

    println(s"Test areaUnderPR = ${metrics.areaUnderPR()}.")
    
    println(s"Test areaUnderROC = ${metrics.areaUnderROC()}.")

    sc.stop()
  
    }

    }
/*******************************************************************************************
  Disclaimer.

      We are providing this code block strictly for learning and researching, this is not a 
production ready code. We have no liability on this particular code under any circumstances; 
users should use this code on their own risk. All software, hardware and othr products that 
are referenced in these materials belong to the respective vendor who developed or who owns 
this product.

/*******************************************************************************************
  
