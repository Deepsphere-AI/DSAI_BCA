
/*******************************************************************************************

File Name       :   CSLAB_BINARY_CLASSIFICATION_METRICS_V1
Purpose 	:   Code for Binary Classification Metrics in Scala
Author		:   Durga Prasad
Reviewer 	:   Jothi Periasamy
Date and Time	:   01/21/2015 11:52 hrs
Version		:   1.0	
Change History 	: 

____________________________________________________________________________________________

	Who				   When 			  Why
____________________________________________________________________________________________


	DP				01/21/2015		    Initital Release 

____________________________________________________________________________________________


/*******************************************************************************************

  package org.apache.spark.examples.mllib

  import org.apache.spark.{SparkConf, SparkContext}

  import org.apache.spark.mllib.classification.LogisticRegressionWithLBFGS

  import org.apache.spark.mllib.evaluation.BinaryClassificationMetrics

  import org.apache.spark.mllib.regression.LabeledPoint

  import org.apache.spark.mllib.util.MLUtils

  object BinaryClassificationMetricsExample {

  def main(args: Array[String]): Unit = {

  val conf = new SparkConf().setAppName("BinaryClassificationMetricsExample")
   
  val sc = new SparkContext(conf)
 
  val data = MLUtils.loadLibSVMFile(sc, "data/mllib/sample_binary_classification_data.txt")

  val Array(training, test) = data.randomSplit(Array(0.6, 0.4), seed = 11L)
  
  training.cache()

  val model = new LogisticRegressionWithLBFGS()
  
  .setNumClasses(2)
  
  .run(training)

   model.clearThreshold
    
   val predictionAndLabels = test.map { case LabeledPoint(label, features) =>
   
   val prediction = model.predict(features)
 
   (prediction, label)
    
   }
    
   val metrics = new BinaryClassificationMetrics(predictionAndLabels)

   val precision = metrics.precisionByThreshold
    
   precision.foreach { case (t, p) =>
      
   println(s"Threshold: $t, Precision: $p")
    
   }

   val recall = metrics.recallByThreshold
   
   recall.foreach { case (t, r) =>
   
   println(s"Threshold: $t, Recall: $r")
    
   }

   val PRC = metrics.pr

   val f1Score = metrics.fMeasureByThreshold
    
   f1Score.foreach { case (t, f) =>
      
   println(s"Threshold: $t, F-score: $f, Beta = 1")
    
   }

   val beta = 0.5
  
   val fScore = metrics.fMeasureByThreshold(beta)
    
   f1Score.foreach { case (t, f) =>
   
   println(s"Threshold: $t, F-score: $f, Beta = 0.5")
    
   }

   val auPRC = metrics.areaUnderPR
    
   println("Area under precision-recall curve = " + auPRC)

   val thresholds = precision.map(_._1)
    
   val roc = metrics.roc

   val auROC = metrics.areaUnderROC
    
   println("Area under ROC = " + auROC)
    
   }

   }

/*******************************************************************************************
  Disclaimer.

      We are providing this code block strictly for learning and researching, this is not a 
production ready code. We have no liability on this particular code under any circumstances; 
users should use this code on their own risk. All software, hardware and othr products that 
are referenced in these materials belong to the respective vendor who developed or who owns 
this product.

/*******************************************************************************************
  
