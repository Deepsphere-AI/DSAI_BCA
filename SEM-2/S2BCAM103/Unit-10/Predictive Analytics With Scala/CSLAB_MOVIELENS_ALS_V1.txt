
/*******************************************************************************************

File Name       :   CSLAB_MOVIELENS_ALS_V1
Purpose 	:   Code for Movie Lens ALS Example in Scala
Author		:   Durga Prasad
Reviewer 	:   Jothi Periasamy
Date and Time	:   01/22/2015 16:59 hrs
Version		:   1.0	
Change History 	: 

____________________________________________________________________________________________

	Who				   When 			  Why
____________________________________________________________________________________________


	DP				01/22/2015		    Initital Release 

____________________________________________________________________________________________


/*******************************************************************************************

  package org.apache.spark.examples.mllib

  import scala.collection.mutable

  import org.apache.log4j.{Level, Logger}

  import scopt.OptionParser

  import org.apache.spark.{SparkConf, SparkContext}

  import org.apache.spark.SparkContext._

  import org.apache.spark.mllib.recommendation.{ALS, MatrixFactorizationModel, Rating}

  import org.apache.spark.rdd.RDD

  object MovieLensALS {

  case class Params(
      
  input: String = null,
      
  kryo: Boolean = false,
      
  numIterations: Int = 20,
      
  lambda: Double = 1.0,
      
  rank: Int = 10,
      
  numUserBlocks: Int = -1,
      
  numProductBlocks: Int = -1,
      
  implicitPrefs: Boolean = false) extends AbstractParams[Params]

  def main(args: Array[String]) {
    
  val defaultParams = Params()

  val parser = new OptionParser[Params]("MovieLensALS") {
      
  head("MovieLensALS: an example app for ALS on MovieLens data.")
      
  opt[Int]("rank")
        
  .text(s"rank, default: ${defaultParams.rank}")
        
  .action((x, c) => c.copy(rank = x))
      
  opt[Int]("numIterations")
        
  .text(s"number of iterations, default: ${defaultParams.numIterations}")
        
  .action((x, c) => c.copy(numIterations = x))
      
  opt[Double]("lambda")
        
  .text(s"lambda (smoothing constant), default: ${defaultParams.lambda}")
        
  .action((x, c) => c.copy(lambda = x))
      
  opt[Unit]("kryo")
        .text("use Kryo serialization")
        .action((_, c) => c.copy(kryo = true))
     
   opt[Int]("numUserBlocks")
        .text(s"number of user blocks, default: ${defaultParams.numUserBlocks} (auto)")
        .action((x, c) => c.copy(numUserBlocks = x))
      
   opt[Int]("numProductBlocks")
        .text(s"number of product blocks, default: ${defaultParams.numProductBlocks} (auto)")
        .action((x, c) => c.copy(numProductBlocks = x))
      
   opt[Unit]("implicitPrefs")
        .text("use implicit preference")
        .action((_, c) => c.copy(implicitPrefs = true))
      
   arg[String]("<input>")
        .required()
        .text("input paths to a MovieLens dataset of ratings")
        .action((x, c) => c.copy(input = x))
       
   }

  parser.parse(args, defaultParams).map { params =>
      
  run(params)
    
  } getOrElse {
      
  System.exit(1)
    
  }
  
  }

  def run(params: Params) {
    
  val conf = new SparkConf().setAppName(s"MovieLensALS with $params")
    
  if (params.kryo) {
      
  conf.registerKryoClasses(Array(classOf[mutable.BitSet], classOf[Rating]))
        
  .set("spark.kryoserializer.buffer", "8m")
    
  }
    
  val sc = new SparkContext(conf)

  Logger.getRootLogger.setLevel(Level.WARN)

  val implicitPrefs = params.implicitPrefs

  val ratings = sc.textFile(params.input).map { line =>
      
  val fields = line.split("::")
      
  if (implicitPrefs) {
           
  Rating(fields(0).toInt, fields(1).toInt, fields(2).toDouble - 2.5)
      
  } else {
        
  Rating(fields(0).toInt, fields(1).toInt, fields(2).toDouble)
      
  }
    
  }.cache()

  val numRatings = ratings.count()
    
  val numUsers = ratings.map(_.user).distinct().count()
    
  val numMovies = ratings.map(_.product).distinct().count()

  println(s"Got $numRatings ratings from $numUsers users on $numMovies movies.")

  val splits = ratings.randomSplit(Array(0.8, 0.2))
    
  val training = splits(0).cache()
  
  val test = if (params.implicitPrefs) {
       
  splits(1).map(x => Rating(x.user, x.product, if (x.rating > 0) 1.0 else 0.0))
    
  } else {
      
  splits(1)
     
  }.cache()

  val numTraining = training.count()
    
  val numTest = test.count()
    
  println(s"Training: $numTraining, test: $numTest.")

  ratings.unpersist(blocking = false)

  val model = new ALS()
  
  .setRank(params.rank)
  
  .setIterations(params.numIterations)
  
  .setLambda(params.lambda)
  
  .setImplicitPrefs(params.implicitPrefs)
  
  .setUserBlocks(params.numUserBlocks)
  
  .setProductBlocks(params.numProductBlocks)
  
  .run(training)

  val rmse = computeRmse(model, test, params.implicitPrefs)

  println(s"Test RMSE = $rmse.")

  sc.stop()
  
  }

  def computeRmse(model: MatrixFactorizationModel, data: RDD[Rating], implicitPrefs: Boolean)
    
  : Double = {

  def mapPredictedRating(r: Double): Double = {
      
  if (implicitPrefs) math.max(math.min(r, 1.0), 0.0) else r
    
  }

  val predictions: RDD[Rating] = model.predict(data.map(x => (x.user, x.product)))
  
  val predictionsAndRatings = predictions.map{ x =>
      
  ((x.user, x.product), mapPredictedRating(x.rating))
    
  }.join(data.map(x => ((x.user, x.product), x.rating))).values
    
  math.sqrt(predictionsAndRatings.map(x => (x._1 - x._2) * (x._1 - x._2)).mean())
  
  }

  }

/*******************************************************************************************
  Disclaimer.

      We are providing this code block strictly for learning and researching, this is not a 
production ready code. We have no liability on this particular code under any circumstances; 
users should use this code on their own risk. All software, hardware and othr products that 
are referenced in these materials belong to the respective vendor who developed or who owns 
this product.

/*******************************************************************************************
  
