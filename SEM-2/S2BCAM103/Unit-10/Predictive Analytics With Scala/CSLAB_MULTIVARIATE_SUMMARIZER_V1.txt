
/*******************************************************************************************

File Name       :   CSLAB_MULTIVARIATE_SUMMARIZER_V1
Purpose 	:   Code for Multivariate Summarizer in Scala
Author		:   Durga Prasad
Reviewer 	:   Jothi Periasamy
Date and Time	:   01/21/2015 17:11 hrs
Version		:   1.0	
Change History 	: 

____________________________________________________________________________________________

	Who				   When 			  Why
____________________________________________________________________________________________


	DP				01/21/2015		    Initital Release 

____________________________________________________________________________________________


/*******************************************************************************************

  package org.apache.spark.examples.mllib

  import scopt.OptionParser

  import org.apache.spark.{SparkConf, SparkContext}

  import org.apache.spark.mllib.linalg.Vectors

  import org.apache.spark.mllib.stat.MultivariateOnlineSummarizer

  import org.apache.spark.mllib.util.MLUtils

  object MultivariateSummarizer {

  case class Params(input: String = "data/mllib/sample_linear_regression_data.txt")
    
  extends AbstractParams[Params]

  def main(args: Array[String]) {

  val defaultParams = Params()

  val parser = new OptionParser[Params]("MultivariateSummarizer") {
  
  head("MultivariateSummarizer: an example app for MultivariateOnlineSummarizer")
  
  opt[String]("input")
  
  .text(s"Input path to labeled examples in LIBSVM format, default: ${defaultParams.input}")
  
  .action((x, c) => c.copy(input = x))
 
   parser.parse(args, defaultParams).map { params =>
      
   run(params)
    
   } getOrElse {
        
   sys.exit(1)
    
   }
   
   }

   def run(params: Params) {
    
   val conf = new SparkConf().setAppName(s"MultivariateSummarizer with $params")
    
   val sc = new SparkContext(conf)

   val examples = MLUtils.loadLibSVMFile(sc, params.input).cache()

   println(s"Summary of data file: ${params.input}")
   
   println(s"${examples.count()} data points")

   val labelSummary = examples.aggregate(new MultivariateOnlineSummarizer())(
   
   (summary, lp) => summary.add(Vectors.dense(lp.label)),

   (sum1, sum2) => sum1.merge(sum2))

   val featureSummary = examples.aggregate(new MultivariateOnlineSummarizer())(
      
   (summary, lp) => summary.add(lp.features),
      
   (sum1, sum2) => sum1.merge(sum2))

    println()
    
    println(s"Summary statistics")
    
    println(s"\tLabel\tFeatures")
    
    println(s"mean\t${labelSummary.mean(0)}\t${featureSummary.mean.toArray.mkString("\t")}")
    
    println(s"var\t${labelSummary.variance(0)}\t${featureSummary.variance.toArray.mkString("\t")}")
    
    println(
     
    s"nnz\t${labelSummary.numNonzeros(0)}\t${featureSummary.numNonzeros.toArray.mkString("\t")}")
   
    println(s"max\t${labelSummary.max(0)}\t${featureSummary.max.toArray.mkString("\t")}")
    
    println(s"min\t${labelSummary.min(0)}\t${featureSummary.min.toArray.mkString("\t")}")

    println()

    sc.stop()

    }

    }

/*******************************************************************************************
  Disclaimer.

      We are providing this code block strictly for learning and researching, this is not a 
production ready code. We have no liability on this particular code under any circumstances; 
users should use this code on their own risk. All software, hardware and othr products that 
are referenced in these materials belong to the respective vendor who developed or who owns 
this product.

/*******************************************************************************************
  
