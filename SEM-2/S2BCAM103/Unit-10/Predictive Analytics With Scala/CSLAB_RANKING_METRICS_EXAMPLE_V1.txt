
/*******************************************************************************************

File Name       :   CSLAB_RANKING_METRICS_EXAMPLE_V1
Purpose 	:   Code for Ranking Metrics Example in Scala
Author		:   Durga Prasad
Reviewer 	:   Jothi Periasamy
Date and Time	:   01/22/2015 19:31 hrs
Version		:   1.0	
Change History 	: 

____________________________________________________________________________________________

	Who				   When 			  Why
____________________________________________________________________________________________


	DP				01/22/2015		    Initital Release 

____________________________________________________________________________________________


/*******************************************************************************************

  package org.apache.spark.examples.mllib

  import org.apache.spark.{SparkConf, SparkContext}

  import org.apache.spark.mllib.evaluation.{RankingMetrics, RegressionMetrics}

  import org.apache.spark.mllib.recommendation.{ALS, Rating}

  import org.apache.spark.sql.SQLContext

  object RankingMetricsExample {
  
  def main(args: Array[String]) {
  
  val conf = new SparkConf().setAppName("RankingMetricsExample")
  
  val sc = new SparkContext(conf)

  val sqlContext = new SQLContext(sc)
  
  import sqlContext.implicits._
    
  val ratings = sc.textFile("data/mllib/sample_movielens_data.txt").map { line =>
      
  val fields = line.split("::")
      
  Rating(fields(0).toInt, fields(1).toInt, fields(2).toDouble - 2.5)
    
  }.cache()
    
  val binarizedRatings = ratings.map(r => Rating(r.user, r.product,
      
  if (r.rating > 0) 1.0 else 0.0)).cache()

  val numRatings = ratings.count()
    
  val numUsers = ratings.map(_.user).distinct().count()
    
  val numMovies = ratings.map(_.product).distinct().count()
    
  println(s"Got $numRatings ratings from $numUsers users on $numMovies movies.")

  val numIterations = 10
    
  val rank = 10
    
  val lambda = 0.01
    
  val model = ALS.train(ratings, rank, numIterations, lambda)

  def scaledRating(r: Rating): Rating = {
  
  val scaledRating = math.max(math.min(r.rating, 1.0), 0.0)
  
  Rating(r.user, r.product, scaledRating)
    
  }

  val userRecommended = model.recommendProductsForUsers(10).map { case (user, recs) =>
  
  (user, recs.map(scaledRating))
    
  }

  val userMovies = binarizedRatings.groupBy(_.user)
    
  val relevantDocuments = userMovies.join(userRecommended).map { case (user, (actual,
    
  predictions)) =>
      
  (predictions.map(_.product), actual.filter(_.rating > 0.0).map(_.product).toArray)
    
  }

  val metrics = new RankingMetrics(relevantDocuments)
    
  Array(1, 3, 5).foreach { k =>
      
  println(s"Precision at $k = ${metrics.precisionAt(k)}")
    
  }

  println(s"Mean average precision = ${metrics.meanAveragePrecision}")

  Array(1, 3, 5).foreach { k =>
      
  println(s"NDCG at $k = ${metrics.ndcgAt(k)}")
    
  }

  val allPredictions = model.predict(ratings.map(r => (r.user, r.product))).map(r => ((r.user,
      
  r.product), r.rating))
    
  val allRatings = ratings.map(r => ((r.user, r.product), r.rating))
    
  val predictionsAndLabels = allPredictions.join(allRatings).map { case ((user, product),
    
  (predicted, actual)) =>
      
  (predicted, actual)
    
  }

  val regressionMetrics = new RegressionMetrics(predictionsAndLabels)
    
  println(s"RMSE = ${regressionMetrics.rootMeanSquaredError}")

  println(s"R-squared = ${regressionMetrics.r2}")
  
  }

  }

/*******************************************************************************************
  Disclaimer.

      We are providing this code block strictly for learning and researching, this is not a 
production ready code. We have no liability on this particular code under any circumstances; 
users should use this code on their own risk. All software, hardware and othr products that 
are referenced in these materials belong to the respective vendor who developed or who owns 
this product.

/*******************************************************************************************
  
