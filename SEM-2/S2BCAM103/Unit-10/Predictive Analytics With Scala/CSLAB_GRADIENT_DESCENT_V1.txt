
/*******************************************************************************************

File Name       :   CSLAB_GRADIENT_DESCENT_V1
Purpose 	:   Code for Gradient Descent in Scala
Author		:   Durga Prasad
Reviewer 	:   Jothi Periasamy
Date and Time	:   01/20/2015 17:15 hrs
Version		:   1.0	
Change History 	: 

____________________________________________________________________________________________

	Who				   When 			  Why
____________________________________________________________________________________________


	DP				01/20/2015		    Initital Release 

____________________________________________________________________________________________


/*******************************************************************************************

  import org.apache.spark.SparkContext

  import org.apache.spark.mllib.evaluation.BinaryClassificationMetrics

  import org.apache.spark.mllib.linalg.Vectors

  import org.apache.spark.mllib.util.MLUtils

  import org.apache.spark.mllib.classification.LogisticRegressionModel

  val data = MLUtils.loadLibSVMFile(sc, "data/mllib/sample_libsvm_data.txt")

  val numFeatures = data.take(1)(0).features.size

  val splits = data.randomSplit(Array(0.6, 0.4), seed = 11L)

  val training = splits(0).map(x => (x.label, MLUtils.appendBias(x.features))).cache()

  val test = splits(1)

  val numCorrections = 10

  val convergenceTol = 1e-4

  val maxNumIterations = 20

  val regParam = 0.1

  val initialWeightsWithIntercept = Vectors.dense(new Array[Double](numFeatures + 1))

  val (weightsWithIntercept, loss) = LBFGS.runLBFGS(training,new LogisticGradient(),new SquaredL2Updater(),
  numCorrections,convergenceTol,maxNumIterations,regParam,initialWeightsWithIntercept)

  val model = new LogisticRegressionModel(
  
  Vectors.dense(weightsWithIntercept.toArray.slice(0, weightsWithIntercept.size - 1)),
  
  weightsWithIntercept(weightsWithIntercept.size - 1))

  model.clearThreshold()

  val scoreAndLabels = test.map { point =>
  
  val score = model.predict(point.features)
  
  (score, point.label)

  }

  val metrics = new BinaryClassificationMetrics(scoreAndLabels)

  val auROC = metrics.areaUnderROC()

  println("Loss of each step in training process")

  loss.foreach(println)

  println("Area under ROC = " + auROC)

/*******************************************************************************************
  Disclaimer.

      We are providing this code block strictly for learning and researching, this is not a 
production ready code. We have no liability on this particular code under any circumstances; 
users should use this code on their own risk. All software, hardware and othr products that 
are referenced in these materials belong to the respective vendor who developed or who owns 
this product.

/*******************************************************************************************
  
