
/*******************************************************************************************

File Name       :   CSLAB_CHISQUARE_SELECTOR_V1
Purpose 	:   A Program for Chisquare Selector in Scala
Author		:   Durga Prasad
Reviewer 	:   Jothi Periasamy
Date and Time	:   08/02/2019 09:59 hrs
Version		:   1.0	
Change History 	: 

____________________________________________________________________________________________

	Who				   When 			  Why
____________________________________________________________________________________________


	DP				08/02/2019		    Initital Release 

____________________________________________________________________________________________


/*******************************************************************************************

## Program Description : A Program for Chisquare Selector in Scala

## Scala Development Environment & Runtime - Eclipse IDE, Anaconda, Jupyter

import org.apache.spark.SparkConf
import org.apache.spark.SparkContext
import org.apache.spark.mllib.feature.ChiSqSelector
import org.apache.spark.mllib.linalg.Vectors
import org.apache.spark.mllib.regression.LabeledPoint
import org.apache.spark.mllib.util.MLUtils

object ChiSqSelectorExample {

  def main(args: Array[String]): Unit = {

    val vAR_CSLAB_conf = new SparkConf().setAppName("ChiSqSelectorExample")
    //val vAR_CSLAB_sc = new SparkContext(vAR_CSLAB_conf)

    var vAR_CSLAB_ENV_PATH = sys.env("SCALA_TUTORIAL_PATH2")
       
    var vAR_CSLAB_DATA_FILE =  "sample_libsvm_data.txt";
      
    var vAR_CSLAB_FILE_PATH =  vAR_CSLAB_ENV_PATH + vAR_CSLAB_DATA_FILE
  
    // Load some data in libsvm format      
    val vAR_CSLAB_data = MLUtils.loadLibSVMFile(sc, vAR_CSLAB_FILE_PATH)
      
    // Discretize data in 16 equal bins since ChiSqSelector requires categorical features
    // Even though features are doubles, the ChiSqSelector treats each unique value as a category
    val vAR_CSLAB_discretizedData = vAR_CSLAB_data.map { vAR_CSLAB_lp =>
      LabeledPoint(vAR_CSLAB_lp.label, Vectors.dense(vAR_CSLAB_lp.features.toArray.map { vAR_CSLAB_x => (vAR_CSLAB_x / 16).floor }))
    }
      
    // Create ChiSqSelector that will select top 50 of 692 features
    val vAR_CSLAB_selector = new ChiSqSelector(50)
      
    // Create ChiSqSelector model (selecting features)
    val vAR_CSLAB_transformer = vAR_CSLAB_selector.fit(vAR_CSLAB_discretizedData)
      
    // Filter the top 50 features from each feature vector
    val vAR_CSLAB_filteredData = vAR_CSLAB_discretizedData.map { vAR_CSLAB_lp =>
      LabeledPoint(vAR_CSLAB_lp.label, vAR_CSLAB_transformer.transform(vAR_CSLAB_lp.features))
    }

    println("filtered data: ")
      
    vAR_CSLAB_filteredData.foreach(vAR_CSLAB_x => println(vAR_CSLAB_x))

    //sc.stop()
      
  }
    
}

ChiSqSelectorExample.main(Array(" "))
	 
/*******************************************************************************************
  Disclaimer.

      We are providing this code block strictly for learning and researching, this is not a 
production ready code. We have no liability on this particular code under any circumstances; 
users should use this code on their own risk. All software, hardware and othr products that 
are referenced in these materials belong to the respective vendor who developed or who owns 
this product.

/*******************************************************************************************
  
