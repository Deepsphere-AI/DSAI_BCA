
/*******************************************************************************************

File Name       :   CSLAB_LATENT_DIRICHLET_ALLOCATION_V1
Purpose 	:   A Program for Latent Dirchlet Allocation in Scala
Author		:   Durga Prasad
Reviewer 	:   Jothi Periasamy
Date and Time	:   07/02/2019 12:47 hrs
Version		:   1.0	
Change History 	: 

____________________________________________________________________________________________

	Who				   When 			  Why
____________________________________________________________________________________________


	DP				07/02/2019		    Initital Release 

____________________________________________________________________________________________


/*******************************************************************************************

## Program Description : A Program for Latent Dirchlet Allocation in Scala

## Scala Development Environment & Runtime - Eclipse IDE, Anaconda, Jupyter

import org.apache.spark.mllib.clustering.{LDA, DistributedLDAModel}
import org.apache.spark.mllib.linalg.Vectors

var vAR_CSLAB_ENV_PATH = sys.env("SCALA_TUTORIAL_PATH2")
       
var vAR_CSLAB_DATA_FILE =  "sample_lda_data.txt";
      
var vAR_CSLAB_FILE_PATH =  vAR_CSLAB_ENV_PATH + vAR_CSLAB_DATA_FILE

// Load and parse the data
val vAR_CSLAB_data = sc.textFile(vAR_CSLAB_FILE_PATH)

val vAR_CSLAB_parsedData = vAR_CSLAB_data.map(s => Vectors.dense(s.trim.split(' ').map(_.toDouble)))

// Index documents with unique IDs
val vAR_CSLAB_corpus = vAR_CSLAB_parsedData.zipWithIndex.map(_.swap).cache()

// Cluster the documents into three topics using LDA
val vAR_CSLAB_ldaModel = new LDA().setK(3).run(vAR_CSLAB_corpus)

// Output topics. Each is a distribution over words (matching word count vectors)
println("Learned topics (as distributions over vocab of " + vAR_CSLAB_ldaModel.vocabSize + " words):")

val vAR_CSLAB_topics = vAR_CSLAB_ldaModel.topicsMatrix

for (vAR_CSLAB_topic <- Range(0, 3)) {
  print("Topic " + vAR_CSLAB_topic + ":")
  for (vAR_CSLAB_word <- Range(0, vAR_CSLAB_ldaModel.vocabSize)) { print(" " + vAR_CSLAB_topics(vAR_CSLAB_word, vAR_CSLAB_topic)); }
  println()
}

// Save and load model.
vAR_CSLAB_ldaModel.save(sc, "myLDAModel11")

val vAR_CSLAB_sameModel = DistributedLDAModel.load(sc, "myLDAModel11")
 
/*******************************************************************************************
  Disclaimer.

      We are providing this code block strictly for learning and researching, this is not a 
production ready code. We have no liability on this particular code under any circumstances; 
users should use this code on their own risk. All software, hardware and othr products that 
are referenced in these materials belong to the respective vendor who developed or who owns 
this product.

/*******************************************************************************************
  
