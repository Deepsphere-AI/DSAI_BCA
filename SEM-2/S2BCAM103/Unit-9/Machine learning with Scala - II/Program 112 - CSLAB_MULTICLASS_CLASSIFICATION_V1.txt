
/*******************************************************************************************

File Name       :   CSLAB_MULTICLASS_CLASSIFICATION_V1
Purpose 	:   A Program for Multiclass Classification in Scala
Author		:   Durga Prasad
Reviewer 	:   Jothi Periasamy
Date and Time	:   07/02/2019 15:47 hrs
Version		:   1.0	
Change History 	: 

____________________________________________________________________________________________

	Who				   When 			  Why
____________________________________________________________________________________________


	DP				07/02/2019		    Initital Release 

____________________________________________________________________________________________


/*******************************************************************************************

## Program Description : A Program for Multiclass Classification in Scala

## Scala Development Environment & Runtime - Eclipse IDE, Anaconda, Jupyter

import org.apache.spark.mllib.classification.LogisticRegressionWithLBFGS
import org.apache.spark.mllib.evaluation.MulticlassMetrics
import org.apache.spark.mllib.regression.LabeledPoint
import org.apache.spark.mllib.util.MLUtils

var vAR_CSLAB_ENV_PATH = sys.env("SCALA_TUTORIAL_PATH2")
       
var vAR_CSLAB_DATA_FILE =  "sample_multiclass_classification_data.txt";
      
var vAR_CSLAB_FILE_PATH =  vAR_CSLAB_ENV_PATH + vAR_CSLAB_DATA_FILE

// Load training data in LIBSVM format
val vAR_CSLAB_data = MLUtils.loadLibSVMFile(sc, vAR_CSLAB_FILE_PATH)

// Split data into training (60%) and test (40%)
val Array(vAR_CSLAB_training, vAR_CSLAB_test) = vAR_CSLAB_data.randomSplit(Array(0.6, 0.4), seed = 11L)
vAR_CSLAB_training.cache()

// Run training algorithm to build the model
val vAR_CSLAB_model = new LogisticRegressionWithLBFGS()
  .setNumClasses(3)
  .run(vAR_CSLAB_training)

// Compute raw scores on the test set
val vAR_CSLAB_predictionAndLabels = vAR_CSLAB_test.map { case LabeledPoint(label, features) =>
  val vAR_CSLAB_prediction = vAR_CSLAB_model.predict(features)
  (vAR_CSLAB_prediction, label)
}

// Instantiate metrics object
val vAR_CSLAB_metrics = new MulticlassMetrics(vAR_CSLAB_predictionAndLabels)

// Confusion matrix
println("Confusion matrix:")
println(vAR_CSLAB_metrics.confusionMatrix)

// Overall Statistics
val vAR_CSLAB_precision = vAR_CSLAB_metrics.precision

val vAR_CSLAB_recall = vAR_CSLAB_metrics.recall // same as true positive rate

val vAR_CSLAB_f1Score = vAR_CSLAB_metrics.fMeasure

println("Summary Statistics")

println(s"Precision = $vAR_CSLAB_precision")

println(s"Recall = $vAR_CSLAB_recall")

println(s"F1 Score = $vAR_CSLAB_f1Score")

// Precision by label
val vAR_CSLAB_labels = vAR_CSLAB_metrics.labels
vAR_CSLAB_labels.foreach { l =>
    println(s"Precision($l) = " + vAR_CSLAB_metrics.precision(l))
}

// Recall by label
vAR_CSLAB_labels.foreach { l =>
    println(s"Recall($l) = " + vAR_CSLAB_metrics.recall(l))
}

// False positive rate by label
vAR_CSLAB_labels.foreach { l =>
    println(s"FPR($l) = " + vAR_CSLAB_metrics.falsePositiveRate(l))
}

// F-measure by label
vAR_CSLAB_labels.foreach { l =>
    println(s"F1-Score($l) = " + vAR_CSLAB_metrics.fMeasure(l))
}

// Weighted stats
println(s"Weighted precision: ${vAR_CSLAB_metrics.weightedPrecision}")

println(s"Weighted recall: ${vAR_CSLAB_metrics.weightedRecall}")

println(s"Weighted F1 score: ${vAR_CSLAB_metrics.weightedFMeasure}")

println(s"Weighted false positive rate: ${vAR_CSLAB_metrics.weightedFalsePositiveRate}")

	 
/*******************************************************************************************
  Disclaimer.

      We are providing this code block strictly for learning and researching, this is not a 
production ready code. We have no liability on this particular code under any circumstances; 
users should use this code on their own risk. All software, hardware and othr products that 
are referenced in these materials belong to the respective vendor who developed or who owns 
this product.

/*******************************************************************************************
  
