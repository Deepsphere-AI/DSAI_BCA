
/*******************************************************************************************

File Name       :   CSLAB_LBFGS_OPTIMIZER_V1
Purpose 	:   A Program for L-BFGS Optimizer in Scala
Author		:   Durga Prasad
Reviewer 	:   Jothi Periasamy
Date and Time	:   07/02/2019 17:42 hrs
Version		:   1.0	
Change History 	: 

____________________________________________________________________________________________

	Who				   When 			  Why
____________________________________________________________________________________________


	DP				07/02/2019		    Initital Release 

____________________________________________________________________________________________


/*******************************************************************************************

## Program Description : A Program for L-BFGS Optimizer in Scala

## Scala Development Environment & Runtime - Eclipse IDE, Anaconda, Jupyter

import org.apache.spark.SparkContext
import org.apache.spark.mllib.evaluation.BinaryClassificationMetrics
import org.apache.spark.mllib.linalg.Vectors
import org.apache.spark.mllib.util.MLUtils
import org.apache.spark.mllib.classification.LogisticRegressionModel
import org.apache.spark.mllib.optimization.{LBFGS, LogisticGradient, SquaredL2Updater}

var vAR_CSLAB_ENV_PATH = sys.env("SCALA_TUTORIAL_PATH2")
       
var vAR_CSLAB_DATA_FILE =  "sample_libsvm_data.txt";
      
var vAR_CSLAB_FILE_PATH =  vAR_CSLAB_ENV_PATH + vAR_CSLAB_DATA_FILE

val vAR_CSLAB_data = MLUtils.loadLibSVMFile(sc, vAR_CSLAB_FILE_PATH)

val vAR_CSLAB_numFeatures = vAR_CSLAB_data.take(1)(0).features.size

// Split data into training (60%) and test (40%).
val vAR_CSLAB_splits = vAR_CSLAB_data.randomSplit(Array(0.6, 0.4), seed = 11L)

// Append 1 into the training data as intercept.
val vAR_CSLAB_training = vAR_CSLAB_splits(0).map(vAR_CSLAB_x => (vAR_CSLAB_x.label, MLUtils.appendBias(vAR_CSLAB_x.features))).cache()

val vAR_CSLAB_test = vAR_CSLAB_splits(1)

// Run training algorithm to build the model
val vAR_CSLAB_numCorrections = 10

val vAR_CSLAB_convergenceTol = 1e-4

val vAR_CSLAB_maxNumIterations = 20

val vAR_CSLAB_regParam = 0.1

val vAR_CSLAB_initialWeightsWithIntercept = Vectors.dense(new Array[Double](vAR_CSLAB_numFeatures + 1))

val (weightsWithIntercept, loss) = LBFGS.runLBFGS(
  vAR_CSLAB_training,
  new LogisticGradient(),
  new SquaredL2Updater(),
  vAR_CSLAB_numCorrections,
  vAR_CSLAB_convergenceTol,
  vAR_CSLAB_maxNumIterations,
  vAR_CSLAB_regParam,
  vAR_CSLAB_initialWeightsWithIntercept)

val vAR_CSLAB_model = new LogisticRegressionModel(
  Vectors.dense(weightsWithIntercept.toArray.slice(0, weightsWithIntercept.size - 1)),
  weightsWithIntercept(weightsWithIntercept.size - 1))

// Clear the default threshold.
vAR_CSLAB_model.clearThreshold()

// Compute raw scores on the test set.
val vAR_CSLAB_scoreAndLabels = vAR_CSLAB_test.map { vAR_CSLAB_point =>
  val vAR_CSLAB_score = vAR_CSLAB_model.predict(vAR_CSLAB_point.features)
  (vAR_CSLAB_score, vAR_CSLAB_point.label)
}

// Get evaluation metrics.
val vAR_CSLAB_metrics = new BinaryClassificationMetrics(vAR_CSLAB_scoreAndLabels)

val vAR_CSLAB_auROC = vAR_CSLAB_metrics.areaUnderROC()

println("Loss of each step in training process")
loss.foreach(println)
println("Area under ROC = " + vAR_CSLAB_auROC)

	 
/*******************************************************************************************
  Disclaimer.

      We are providing this code block strictly for learning and researching, this is not a 
production ready code. We have no liability on this particular code under any circumstances; 
users should use this code on their own risk. All software, hardware and othr products that 
are referenced in these materials belong to the respective vendor who developed or who owns 
this product.

/*******************************************************************************************
  
