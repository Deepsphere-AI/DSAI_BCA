
/*******************************************************************************************

File Name       :   CSLAB_MULTICLASS_METRICS_V1
Purpose 	:   Code for Multiclass Metrics in Scala
Author		:   Durga Prasad
Reviewer 	:   Jothi Periasamy
Date and Time	:   01/21/2015 16:41 hrs
Version		:   1.0	
Change History 	: 

____________________________________________________________________________________________

	Who				   When 			  Why
____________________________________________________________________________________________


	DP				01/21/2015		    Initital Release 

____________________________________________________________________________________________


/*******************************************************************************************

  package org.apache.spark.examples.mllib

  import org.apache.spark.{SparkConf, SparkContext}

  import org.apache.spark.mllib.classification.LogisticRegressionWithLBFGS

  import org.apache.spark.mllib.evaluation.MulticlassMetrics

  import org.apache.spark.mllib.regression.LabeledPoint

  import org.apache.spark.mllib.util.MLUtils

  object MulticlassMetricsExample {

  def main(args: Array[String]): Unit = {
    
  val conf = new SparkConf().setAppName("MulticlassMetricsExample")
    
  val sc = new SparkContext(conf)

  val data = MLUtils.loadLibSVMFile(sc, "data/mllib/sample_multiclass_classification_data.txt")

  val Array(training, test) = data.randomSplit(Array(0.6, 0.4), seed = 11L)
    
  training.cache()

  val model = new LogisticRegressionWithLBFGS()
  
  .setNumClasses(3)
  
  .run(training)
    
   val predictionAndLabels = test.map { case LabeledPoint(label, features) =>
   
   val prediction = model.predict(features)
   
   (prediction, label)
    
   }
    
   val metrics = new MulticlassMetrics(predictionAndLabels)

   println("Confusion matrix:")
    
   println(metrics.confusionMatrix)

   val precision = metrics.precision
   
   val recall = metrics.recall // same as true positive rate
    
   val f1Score = metrics.fMeasure
   
   println("Summary Statistics")
    
   println(s"Precision = $precision")
    
   println(s"Recall = $recall")
    
   println(s"F1 Score = $f1Score")

   val labels = metrics.labels
    
   labels.foreach { l =>
      
   println(s"Precision($l) = " + metrics.precision(l))
    
   }

   labels.foreach { l =>
   
   println(s"Recall($l) = " + metrics.recall(l))
    
   }

   labels.foreach { l =>
   
   println(s"FPR($l) = " + metrics.falsePositiveRate(l))
    
   }

   labels.foreach { l =>
   
   println(s"F1-Score($l) = " + metrics.fMeasure(l))

   }

   println(s"Weighted precision: ${metrics.weightedPrecision}")
    
   println(s"Weighted recall: ${metrics.weightedRecall}")
    
   println(s"Weighted F1 score: ${metrics.weightedFMeasure}")
    
   println(s"Weighted false positive rate: ${metrics.weightedFalsePositiveRate}")
   
   }

   }
 
/*******************************************************************************************
  Disclaimer.

      We are providing this code block strictly for learning and researching, this is not a 
production ready code. We have no liability on this particular code under any circumstances; 
users should use this code on their own risk. All software, hardware and othr products that 
are referenced in these materials belong to the respective vendor who developed or who owns 
this product.

/*******************************************************************************************
  
